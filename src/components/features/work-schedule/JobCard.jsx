import React, { useState, useRef, useEffect } from "react";
import { Phone, Clock, MapPin, Image } from "lucide-react";
import { getStatusColor, getStatusName } from "./WorkTable";
import JobDetailTooltip from "./JobDetailTooltip";
// import JobDetailModal from "./JobDetailModal";
import AssignWorkerModal from "./AssignWorkerModal";

const JobCard = ({ job, index, onAssign, onEdit, workers = [] }) => {
  const [showTooltip, setShowTooltip] = useState(false);
  const [showModal, setShowModal] = useState(false); // kept for compatibility, but we will open Edit instead
  const [isAssignModalOpen, setIsAssignModalOpen] = useState(false);
  const [isChangingWorker, setIsChangingWorker] = useState(false);
  const [tooltipPosition, setTooltipPosition] = useState("bottom");
  const cardRef = useRef(null);
  // Ki·ªÉm tra v·ªã tr√≠ c·ªßa card ƒë·ªÉ quy·∫øt ƒë·ªãnh hi·ªÉn th·ªã tooltip l√™n tr√™n hay xu·ªëng d∆∞·ªõi
  useEffect(() => {
    const checkTooltipPosition = () => {
      if (cardRef.current) {
        const rect = cardRef.current.getBoundingClientRect();
        const viewportHeight = window.innerHeight;
        const tooltipHeight = 200; // ∆Ø·ªõc t√≠nh chi·ªÅu cao c·ªßa tooltip

        // N·∫øu card ·ªü g·∫ßn cu·ªëi viewport, hi·ªÉn th·ªã tooltip l√™n tr√™n
        if (rect.bottom + tooltipHeight > viewportHeight - 20) {
          setTooltipPosition("top");
        } else {
          setTooltipPosition("bottom");
        }
      }
    };

    if (showTooltip) {
      checkTooltipPosition();
    }
  }, [showTooltip]);

  return (
    <div
      ref={cardRef}
      className="flex relative items-center text-xs bg-white rounded-lg border border-gray-200 transition-all duration-200 hover:border-brand-green/300 hover:shadow-md"
      onMouseEnter={() => setShowTooltip(true)}
      onMouseLeave={() => setShowTooltip(false)}
    >
      {/* Ph·∫ßn b√™n tr√°i - Ch·ª©a t·∫•t c·∫£ n·ªôi dung v·ªõi background */}
      <div
        className="flex flex-1 gap-2 items-center px-2 py-1 min-w-0 rounded-l-lg transition-colors cursor-pointer hover:bg-blue-50/30"
        onClick={() => onEdit(job, false)}
      >

        {/* N·ªôi dung c√¥ng vi·ªác + Th√¥ng tin kh√°ch h√†ng - Flexible */}
        <div className="flex flex-col flex-1 min-w-0 space-y-0.5">
          {/* 1. D√≤ng 1: M√£ code l·ªãch */}
          {job.job_code && (
            <div className="flex items-center space-x-1">
              <span className="text-xs font-bold text-[#125d0d]">
                #{job.job_code}
              </span>
            </div>
          )}
          
          {/* 2. D√≤ng 2: N·ªôi dung c√¥ng vi·ªác, T√™n, SƒêT, Th·ªùi gian h·∫πn */}
          <div className="flex items-center space-x-2 text-xs text-gray-600">
            {/* N·ªôi dung c√¥ng vi·ªác */}
            <div className="flex items-center space-x-1 min-w-0">
              <span className="font-semibold text-gray-900 truncate">
                {job.job_content || "Kh√¥ng c√≥ n·ªôi dung"}
              </span>
            </div>
            
            {/* T√™n kh√°ch h√†ng */}
            <div className="flex items-center space-x-1 min-w-0">
              <span className="text-brand-green">üë§</span>
              <span className="font-medium truncate max-w-20">
                {job.job_customer_name || ""}
              </span>
            </div>
            
            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <div className="flex items-center space-x-1 min-w-0">
              <Phone className="flex-shrink-0 w-3 h-3 text-brand-green" />
              <span className="font-medium truncate max-w-20">
                {job.job_customer_phone || ""}
              </span>
            </div>
            
            {/* Th·ªùi gian h·∫πn */}
            {job.job_appointment_time && (
              <div className="flex items-center space-x-1 min-w-0">
                <Clock className="flex-shrink-0 w-3 h-3 text-brand-yellow" />
                <span className="font-medium text-brand-yellow">
                  {job.job_appointment_time}
                </span>
              </div>
            )}
          </div>
          
          {/* 3. D√≤ng 3: ƒê·ªãa ch·ªâ + Ghi ch√∫ + H√¨nh ·∫£nh + Th·ª£ */}
          <div className="flex items-center space-x-2 text-xs text-gray-600">
            {/* ƒê·ªãa ch·ªâ */}
            <div className="flex flex-1 items-center space-x-1 min-w-0">
              <MapPin className="flex-shrink-0 w-3 h-3 text-brand-green" />
              <span className="text-gray-700 truncate">
                {job.job_customer_address || ""}
              </span>
            </div>
            
            {/* Ghi ch√∫ (n·∫øu c√≥) */}
            {job.job_customer_note && (
              <div className="flex items-center space-x-1 min-w-0">
                <span className="text-brand-yellow">üìù</span>
                <span className="text-gray-500 truncate max-w-20" title={job.job_customer_note}>
                  {job.job_customer_note.length > 15 
                    ? job.job_customer_note.substring(0, 15) + "..." 
                    : job.job_customer_note}
                </span>
              </div>
            )}
            
            {/* H√¨nh ·∫£nh */}
            {job.images_count > 0 && (
              <div className="flex items-center space-x-1 min-w-0">
                <Image className="flex-shrink-0 w-3 h-3 text-brand-green" />
                <span className="font-medium text-brand-green">
                  {job.images_count}
                </span>
              </div>
            )}
            
            {/* Th·ª£ ƒë√£ ph√¢n c√¥ng */}
            {job.id_worker && (
              <div className="flex items-center space-x-1 min-w-0">
                <span className="text-brand-green">üë∑</span>
                <span className="font-medium truncate text-brand-green max-w-16">
                  {job.worker_full_name || job.worker_code || ""}
                </span>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Ph·∫ßn b√™n ph·∫£i - Ch·ª©a c√°c n√∫t h√†nh ƒë·ªông - C·ªë ƒë·ªãnh v·ªã tr√≠ */}
      <div
        className="flex flex-shrink-0 items-center px-2 py-1 space-x-0.5 w-auto rounded-r-lg border-l border-gray-200 bg-gray-100/50"
        onClick={(e) => e.stopPropagation()}
      >
        {job.id_worker ? (
          <>
            <button
              onMouseDown={(e) => {
                e.preventDefault();
                e.stopPropagation();
              }}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                setIsChangingWorker(true);
                setIsAssignModalOpen(true);
              }}
              className="p-1 text-gray-500 rounded transition-all duration-200 cursor-pointer hover:text-brand-green hover:bg-brand-green/10 hover:shadow-sm"
              title="ƒê·ªïi th·ª£"
            >
              <span className="text-xs">üîÑ</span>
            </button>
            <button
              onMouseDown={(e) => {
                e.preventDefault();
                e.stopPropagation();
              }}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                onEdit(job, false);
              }}
              className="p-1 text-gray-500 rounded transition-all duration-200 hover:text-brand-green hover:bg-brand-green/10 hover:shadow-sm"
              title="Ch·ªânh s·ª≠a th√¥ng tin"
            >
              <span className="text-xs">‚úèÔ∏è</span>
            </button>
            <button
              onMouseDown={(e) => {
                e.preventDefault();
                e.stopPropagation();
              }}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                onEdit(job, true);
              }}
              className="p-1 text-gray-500 rounded transition-all duration-200 hover:text-brand-green hover:bg-brand-green/10 hover:shadow-sm"
              title="Nh·∫≠p thu chi"
            >
              <span className="text-xs">üí∞</span>
            </button>
          </>
        ) : (
          <>
            <button
              onMouseDown={(e) => {
                e.preventDefault();
                e.stopPropagation();
              }}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                setIsChangingWorker(false);
                setIsAssignModalOpen(true);
              }}
              className="p-1 text-gray-500 rounded transition-all duration-200 hover:text-brand-green hover:bg-brand-green/10 hover:shadow-sm"
              title="Ph√¢n c√¥ng th·ª£"
            >
              <span className="text-xs">üë§+</span>
            </button>
          </>
        )}
      </div>
      {/* Tooltip */}
      {showTooltip && (
        <div
          className={`absolute left-0 z-50 ${
            tooltipPosition === "top" ? "bottom-full mb-1" : "top-full mt-1"
          }`}
        >
          <JobDetailTooltip job={job} />
        </div>
      )}
      {/* Modal xem chi ti·∫øt (ƒë√£ thay b·∫±ng m·ªü modal ch·ªânh s·ª≠a) */}
      {/* <JobDetailModal job={job} open={showModal} onClose={() => setShowModal(false)} /> */}

      {/* Assign Worker Modal */}
      {isAssignModalOpen && (
        <AssignWorkerModal
          work={job}
          workers={workers}
          onClose={() => setIsAssignModalOpen(false)}
          onAssign={onAssign}
          isChanging={isChangingWorker}
        />
      )}
    </div>
  );
};

export default JobCard;
