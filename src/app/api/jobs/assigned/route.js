import { NextResponse } from 'next/server';
import { transformJobData } from '@/utils/jobDataTransformer';
import { API_URLS } from '@/config/constants';

export async function POST(request) {
  try {
    const { date } = await request.json();
    
    // G·ªçi API ƒë·ªÉ l·∫•y assigned jobs
    console.log('üöÄ Calling assigned API:', API_URLS.JOB_GET_ASSIGNED_WORKER_BY_DATE);
    console.log('üìÖ Date parameter:', date);
    
    // L·∫•y token t·ª´ request headers n·∫øu c√≥
    const authHeader = request.headers.get('authorization');
    const headers = {
      'Content-Type': 'application/json',
    };
    
    if (authHeader) {
      headers['Authorization'] = authHeader;
    }
    
    const response = await fetch(API_URLS.JOB_GET_ASSIGNED_WORKER_BY_DATE, {
      method: 'POST',
      headers,
      body: JSON.stringify({ date }),
    });
    
    console.log('üì° API response status:', response.status);
    console.log('üì° API response ok:', response.ok);

    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå API Error Response:', errorText);
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }
    
    const data = await response.json();
    
    // Debug: Log API response
    console.log('üîç Assigned API response:', data);
    
    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu - c√≥ th·ªÉ c√≥ nhi·ªÅu format kh√°c nhau
    let rawData = null;
    
    if (data.data) {
      // Format: { success: true, data: {...} }
      rawData = data.data;
      console.log('‚úÖ Using data.data format');
    } else if (Array.isArray(data)) {
      // Format: [...] (m·∫£ng tr·ª±c ti·∫øp)
      rawData = data;
      console.log('‚úÖ Using direct array format');
    } else if (data && typeof data === 'object') {
      // Format: {...} (object tr·ª±c ti·∫øp)
      rawData = data;
      console.log('‚úÖ Using direct object format');
    } else {
      console.log('‚ùå Unknown data format:', data);
      return NextResponse.json(
        { error: 'Invalid API response format' },
        { status: 500 }
      );
    }
    
    // X·ª≠ l√Ω c·∫•u tr√∫c d·ªØ li·ªáu assigned jobs - nh√≥m theo worker
    let transformedData = null;
    
    if (Array.isArray(rawData)) {
      // C·∫•u tr√∫c: [{ worker_code, worker_name, jobs: [...] }, ...]
      console.log('‚úÖ Processing assigned jobs grouped by worker');
      
      // G·ªôp t·∫•t c·∫£ jobs t·ª´ t·∫•t c·∫£ workers th√†nh 1 m·∫£ng
      const allJobs = [];
      rawData.forEach(worker => {
        if (worker.jobs && Array.isArray(worker.jobs)) {
          worker.jobs.forEach(job => {
            // Th√™m th√¥ng tin worker v√†o m·ªói job
            allJobs.push({
              ...job,
              worker_code: worker.worker_code,
              worker_name: worker.worker_name,
              worker_full_name: worker.worker_name, // ƒê·ªÉ t∆∞∆°ng th√≠ch v·ªõi UI
              // ƒê·∫£m b·∫£o c√≥ c√°c field c·∫ßn thi·∫øt
              job_priority: 'normal', // M·∫∑c ƒë·ªãnh l√† normal
              images_count: 0 // M·∫∑c ƒë·ªãnh kh√¥ng c√≥ ·∫£nh
            });
          });
        }
      });
      
      console.log(`‚úÖ Flattened ${allJobs.length} jobs from ${rawData.length} workers`);
      
      // Chuy·ªÉn ƒë·ªïi sang c·∫•u tr√∫c t∆∞∆°ng th√≠ch v·ªõi transformJobData
      transformedData = transformJobData(allJobs);
    } else {
      // N·∫øu kh√¥ng ph·∫£i m·∫£ng, s·ª≠ d·ª•ng transformJobData nh∆∞ c≈©
      transformedData = transformJobData(rawData);
    }
    
    console.log('‚úÖ Final transformed assigned data:', transformedData);
    
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ c·∫•u tr√∫c r·ªóng
    if (!transformedData || (typeof transformedData === 'object' && Object.keys(transformedData).length === 0)) {
      console.log('‚ö†Ô∏è No assigned jobs found, returning empty structure');
      return NextResponse.json({
        job_priority: [],
        job_normal: [],
        job_cancelled: [],
        job_no_answer: [],
        job_worker_return: [],
        job_phone_error: []
      });
    }
    
    return NextResponse.json(transformedData);
  } catch (error) {
    console.error('Error fetching assigned jobs:', error);
    return NextResponse.json(
      { error: 'Failed to fetch assigned jobs' },
      { status: 500 }
    );
  }
} 